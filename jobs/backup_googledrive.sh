#!/usr/bin/env bash

################################################################################
# Nom du script : backup_googledrive.sh
#
# Objectif :
# Ce script automatise la sauvegarde de fichiers depuis Google Drive.
# Il utilise l'outil rclone pour synchroniser les donn√©es.
# Il historise dans une archive tar.gz les versions.
#
# Auteur :
# Alan MARCHAND (keltalan@proton.me)
#
# Compatibilit√© :
# Ce script est con√ßu pour fonctionner uniquement avec Bash.
# Test√© sur les syst√®mes Ubuntu et Debian.
#
# tilisation :
# - Peut √™tre lanc√© manuellement depuis un terminal.
# - Peut √™tre int√©gr√© dans une t√¢che planifi√©e (cron).
#
# Fonctionnement g√©n√©ral :
# 1. V√©rifie que les outils n√©cessaires sont install√©s.
# 2. Cr√©e les r√©pertoires de sauvegarde et d'archive si besoin.
# 3. Emp√™che l'ex√©cution simultan√©e de plusieurs instances du script.
# 4. Cr√©e une archive compress√©e des fichiers synchronis√©s.
# 5. Synchronise les fichiers depuis Google Drive vers un dossier local.
# 7. Enregistre les logs et affiche les messages d'√©tat.
#
# Pour les d√©butants :
# - Chaque commande est comment√©e dans le script pour faciliter la lecture.
# - Les erreurs sont g√©r√©es automatiquement pour √©viter les plantages.
# - Le script est structur√© en sections claires pour une meilleure compr√©hension.
#
# Exemple de structure de r√©pertoires :
# $HOME/backups/googledrive     ‚Üí Dossier de sauvegarde local
# $HOME/backups/archives        ‚Üí Dossier contenant les archives compress√©es
################################################################################


# -----------------------------------------------------------------------------
# S√©curit√© et gestion des erreurs
# -----------------------------------------------------------------------------
# Active trois options de s√©curit√© pour rendre le script plus fiable.
# -e : arr√™te le script si une commande √©choue
# -u : arr√™te si une variable non d√©finie est utilis√©e
# -o pipefail : d√©tecte les erreurs dans les pipelines
set -euo pipefail


# -----------------------------------------------------------------------------
# Gestion des erreurs avec trap
# -----------------------------------------------------------------------------
# La commande trap permet d'intercepter certains √©v√©nements pendant l'ex√©cution.
# Elle est souvent utilis√©e pour r√©agir √† des erreurs ou nettoyer avant de sortir.
#
# Syntaxe : trap <action> <signal>
# Ici, l'action est d'appeler la fonction handle_script_error.
# Le signal ERR est d√©clench√© d√®s qu'une commande √©choue (exit code ‚â† 0).
#
# Cela signifie que si une commande √©choue dans le script,
# la fonction handle_script_error sera automatiquement ex√©cut√©e.
# Cette fonction peut afficher un message, enregistrer une erreur,
# ou effectuer un nettoyage avant de quitter le script.
#
# Ce m√©canisme rend le script plus robuste et plus facile √† d√©boguer.
trap handle_script_error ERR


# -----------------------------------------------------------------------------
# Fonction de gestion des erreurs
# -----------------------------------------------------------------------------
# Cette fonction affiche un message d'erreur et supprime le fichier de verrou.
# Elle est appel√©e automatiquement si une erreur survient dans le script.
handle_script_error() {
  echo "‚ùå Une erreur est survenue. Arr√™t du script." >&2
  rm -f "${LOCK_FILE:-/tmp/gdrivebak_lock}"
  exit 1
}


# -----------------------------------------------------------------------------
# Chargement des fonctions utilitaires
# -----------------------------------------------------------------------------
COMMON_LIB="$HOME/alm-tools/lib/common.sh"
if [[ -f "${COMMON_LIB}" ]]; then
  source "${COMMON_LIB}"
else
  echo "Fichier common.sh introuvable √† ${COMMON_LIB}" >&2
  exit 1
fi


# -----------------------------------------------------------------------------
# Configuration
# -----------------------------------------------------------------------------
readonly RCLONE_REMOTE="googledrive"
readonly SOURCE_DIR=""
readonly BACKUP_DIR="$HOME/backups/googledrive"
readonly ARCHIVE_DIR="$HOME/backups/archives"
readonly SCRIPT_NAME="${0##*/}"
readonly SCRIPT_BASENAME="${SCRIPT_NAME%.*}"
readonly LOCK_FILE="/tmp/${SCRIPT_BASENAME}_pid$$"


# -----------------------------------------------------------------------------
# V√©rifications des pr√©requis
# -----------------------------------------------------------------------------

log_info "V√©rification des outils n√©cessaires : rclone, pv & hashdeep."
command -v rclone &> /dev/null || { log_error "rclone n'est pas install√©."; exit 1; }
command -v pv &> /dev/null || { log_error "pv n'est pas install√©."; exit 1; }
command -v hashdeep &> /dev/null || { log_error "hasdeep n'est pas install√©."; exit 1; }

log_info "Cr√©ation des r√©pertoires de sauvegarde et d'archive si n√©cessaires."
mkdir -p "$BACKUP_DIR"
mkdir -p "$ARCHIVE_DIR"


# -----------------------------------------------------------------------------
# Affichage de la configuration
# -----------------------------------------------------------------------------
log_info "üìÅ Configuration des r√©pertoires et param√®tres :"
log_info "-> V√©rification des privil√®ges : pas besoin de root ici."
log_info "-> Remote Rclone utilis√©       : $RCLONE_REMOTE"
log_info "-> R√©pertoire source           : $SOURCE_DIR"
log_info "-> R√©pertoire de backup local  : $BACKUP_DIR"
log_info "-> R√©pertoire d'archives       : $ARCHIVE_DIR"
log_info "-> Nom du script               : $SCRIPT_NAME"
log_info "-> Nom de base du script       : $SCRIPT_BASENAME"
log_info "-> Fichier de verrouillage     : $LOCK_FILE"


# -----------------------------------------------------------------------------
# V√©rifie si une instance du script est d√©j√† en cours
# -----------------------------------------------------------------------------
lock_guard "$LOCK_FILE"


# -----------------------------------------------------------------------------
# Synchronisation avec Google Drive
# -----------------------------------------------------------------------------
log_info "D√©but de la synchronisation avec Google Drive."

rclone sync "$RCLONE_REMOTE:$SOURCE_DIR" "$BACKUP_DIR" \
  --progress \
  --stats 1m \
  --log-file "$BACKUP_DIR/rclone_sync.log"

if [[ $? -eq 0 ]]; then
  log_success "Synchronisation termin√©e avec succ√®s."
else
  log_warning "Erreur lors de la synchronisation. Voir le fichier de log."
fi


# -----------------------------------------------------------------------------
# Cr√©ation d'une archive gzip de sauvegarde
# -----------------------------------------------------------------------------
log_info "D√©but de la cr√©ation d'une nouvelle archive de sauvegarde."

TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
ARCHIVE_FILE="$ARCHIVE_DIR/${RCLONE_REMOTE}_$TIMESTAMP.tar.gz"
ARCHIVE_FILE_SHA256="${ARCHIVE_FILE}.sha256.txt"
TOTAL_SIZE=$(du -bs "$BACKUP_DIR" | awk '{print $1}')

# ‚ùå Cette commande est abandonn√©e car elle ne produit pas une archive
# identique si le contenu source n'a pas chang√©. Elle est sensible aux
# m√©tadonn√©es et √† l'ordre des fichiers, ce qui modifie le hash final.
#
# tar -c -C "$BACKUP_DIR" . : cr√©e une archive √† partir du r√©pertoire
# de sauvegarde, mais sans contr√¥le sur l'ordre des fichiers ni sur les
# m√©tadonn√©es comme les dates ou les propri√©taires.
#
# pv -s "$TOTAL_SIZE" : affiche une barre de progression pendant la
# compression, ce qui est utile mais n'influence pas le contenu.
#
# gzip -9 : compresse l'archive avec le niveau maximal, mais sans
# emp√™cher l'ajout de m√©tadonn√©es comme le nom du fichier ou un
# timestamp dans l'en-t√™te gzip.
#
# > "$ARCHIVE_FILE" : enregistre le fichier final, mais son contenu
# varie √† chaque ex√©cution m√™me si les fichiers source sont identiques.
#
# üëâ Pour garantir des sauvegardes fiables et comparables, une version
# d√©terministe est utilis√©e √† la place, avec des options qui neutralisent
# les variations li√©es aux m√©tadonn√©es et √† la compression.
####
# tar -c -C "$BACKUP_DIR" . | pv -s "$TOTAL_SIZE" | gzip -9 > "$ARCHIVE_FILE"

# Cette commande cr√©e une archive compress√©e de mani√®re d√©terministe.
# Elle est utilis√©e pour sauvegarder un r√©pertoire sans que le hash change
# si le contenu reste identique. Cela permet de d√©tecter les vraies
# modifications entre deux sauvegardes.
#
# tar --sort=name : trie les fichiers par nom pour garantir un ordre stable.
# --mtime='UTC 2020-01-01' : fixe une date de modification neutre.
# --owner=0 --group=0 --numeric-owner : supprime les infos utilisateur/groupe.
# -c -C "$BACKUP_DIR" . : cr√©e une archive √† partir du r√©pertoire de backup.
#
# pv -s "$TOTAL_SIZE" : affiche une barre de progression pendant le traitement.
#
# gzip -9 -n : compresse l‚Äôarchive avec le niveau maximal (-9) et sans ajouter
# de m√©tadonn√©es comme le nom du fichier ou un timestamp (-n).
#
# > "$ARCHIVE_FILE" : enregistre le r√©sultat dans le fichier final .tar.gz.
#
# Gr√¢ce √† cette m√©thode, deux archives identiques auront le m√™me hash SHA256.
# Cela rend les sauvegardes comparables et fiables dans le temps.

tar --sort=name \
    --mtime='UTC 2020-01-01' \
    --owner=0 --group=0 --numeric-owner \
    -c -C "$BACKUP_DIR" . \
| pv -s "$TOTAL_SIZE" \
| gzip -9 -n \
> "$ARCHIVE_FILE"

if [ $? -eq 0 ]; then
  log_success "‚úÖ Nouvelle archive cr√©√©e : $ARCHIVE_FILE"
else
  log_error "‚ùå Erreur lors de la cr√©ation de l'archive."
  exit 1
fi

hashdeep -c sha256 -l "$ARCHIVE_FILE" > "$ARCHIVE_FILE_SHA256"
if [ $? -eq 0 ]; then
  log_success "‚úÖ Cr√©ation du SHA256 de l'archive : $ARCHIVE_FILE_SHA256"

  # grep -v '^#' : ignore les lignes de commentaire
  # grep -v '^%%%%' : ignore les lignes de m√©tadonn√©es
  # awk -F',' '{print $2}' : extrait le deuxi√®me champ (s√©paretur = virgule)
  HV=$(grep -v '^#' "$ARCHIVE_FILE_SHA256" | grep -v '^%%%%' | awk -F',' '{print $2}')
  log_info "üîê Valeur ARCHIVE_FILE_SHA256 : $HV"
else
  log_error "Erreur lors de la Cr√©ation du SHA256 de l'archive."
  exit 1
fi


# -----------------------------------------------------------------------------
# Gestion de l'historisation des archives
# -----------------------------------------------------------------------------
log_info "Gestion de l'historisation des archives."

SECOND_LAST_ARCHIVE=""
SECOND_LAST_ARCHIVE_SHA256=""

# Recherche l'avant derni√®re archive existante.
# R√©cup√®re tous les fichiers .tar.gz tri√©s par nom (timestamp implicite)
mapfile -t archives < <(ls -1 "$ARCHIVE_DIR"/*.tar.gz 2>/dev/null | sort)

# V√©rifie qu'il y a au moins deux fichiers
if [ "${#archives[@]}" -ge 2 ]; then
  SECOND_LAST_ARCHIVE="${archives[-2]}"
  SECOND_LAST_ARCHIVE_SHA256="${SECOND_LAST_ARCHIVE}.sha256.txt"
else
  SECOND_LAST_ARCHIVE=""
fi

if [[ -n "$SECOND_LAST_ARCHIVE" ]]; then
  log_info "Avant derni√®re archive trouv√©e : $SECOND_LAST_ARCHIVE"
  log_info "SHA256 de l'avant derni√®re archive trouv√©e : $SECOND_LAST_ARCHIVE_SHA256"

  ARCHIVE_HASH=$(grep -v '^#' "$ARCHIVE_FILE_SHA256" | grep -v '^%%%%' | awk -F',' '{print $2}' | head -n 1)
  SECOND_LAST_ARCHIVE_HASH=$(grep -v '^#' "$SECOND_LAST_ARCHIVE_SHA256" | grep -v '^%%%%' | awk -F',' '{print $2}' | head -n 1)

  log_info "üîê SECOND_LAST_ARCHIVE_HASH: $SECOND_LAST_ARCHIVE_HASH"

  if [[ "$ARCHIVE_HASH" == "$SECOND_LAST_ARCHIVE_HASH" ]]; then
    log_info "Les archives sont identiques. Suppression de la derni√®re archive inutile."
    rm -f "$ARCHIVE_FILE" "$ARCHIVE_FILE_SHA256"
    log_info "Suppression de $ARCHIVE_FILE"
    log_info "Suppression de $ARCHIVE_FILE_SHA256"
  else
    log_info "üîÑ Des modifications ont √©t√© d√©tect√©es. La nouvelle archive est conserv√©e."
  fi
else
  log_info "‚ö†Ô∏è Aucune avant-derni√®re archive trouv√©e."
fi


# -----------------------------------------------------------------------------
# Fin du script
# -----------------------------------------------------------------------------
log_info "Toutes les √©tapes de sauvegarde ont √©t√© ex√©cut√©es."
log_success "Script termin√©."
exit 0
